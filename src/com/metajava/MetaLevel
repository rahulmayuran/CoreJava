Most of the topics related to Java can be found in the internet.

Some of the most fundamental concepts

1. Java has been one of the most popular programming language for many years.
2. Java is Object Oriented. However it is not considered as pure object oriented as it provides support for primitive data types (like int, char, etc)
3. The Java codes are first compiled into byte code (machine independent code). Then the byte code is run on Java Virtual Machine (JVM) regardless of the underlying architecture.
4. Java syntax is similar to C/C++. But Java does not provide low level programming functionalities like pointers. Also, Java codes are always written in the form of classes and objects.
5. Java is used in all kind of applications like Mobile Applications (Android is Java based), desktop applications, web applications, client server applications, enterprise applications and many more.
6. When compared with C++, Java codes are generally more maintainable because Java does not allow many things which may lead bad/inefficient programming if used incorrectly. For example, non-primitives are always references in Java. So we cannot pass large objects (like we can do in C++) to functions, we always pass references in Java. One more example, since there are no pointers, bad memory access is also not possible.
7. When compared with Python, Java kind of fits between C++ and Python. The programs written in Java typically run faster than corresponding Python programs and slower than C++. Like C++, Java does static type checking, but Python does not.

Distributed Systems
1. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java.

Multithreading
For maximum utilization of the CPU, java allows concurrent execution of two/more parts of program

Java Virtual Machine
A Run-time engine to run java applications, once the java compiler converts .java code to .class files. the JVM will load the class file
by reading .class file, generating a binary data and storing it to method area. For every .class file, JVM stores

1. Fully qualified name of the loaded class & immediate parent
2. modifier, variable, A class/interface or Enum.

After loading .class file JVM creates a Class object which is predefined in java.lang package.
It is also stored in the Heap memory whose reference can be accessed by .getClass() function.